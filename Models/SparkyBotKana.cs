// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Sunweb.Sparky.Bot.Kana;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace CoreBot.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("KnowledgeBases")]
        public KnowledgeBasis[] KnowledgeBases { get; set; }

        [JsonProperty("Version")]
        public long Version { get; set; }

        [JsonProperty("Successfull")]
        public bool Successfull { get; set; }

        [JsonProperty("ErrorMessage")]
        public object ErrorMessage { get; set; }

        [JsonProperty("ErrorDetails")]
        public object ErrorDetails { get; set; }
    }

    public partial class KnowledgeBasis
    {
        [JsonProperty("NodeId")]
        public long NodeId { get; set; }

        [JsonProperty("ParentId")]
        public long ParentId { get; set; }

        [JsonProperty("SectionId")]
        public long SectionId { get; set; }

        [JsonProperty("LanguageId")]
        public long LanguageId { get; set; }

        [JsonProperty("ChannelId")]
        public long ChannelId { get; set; }

        [JsonProperty("DisplayText")]
        public string DisplayText { get; set; }

        [JsonProperty("SolutionText")]
        public string SolutionText { get; set; }

        [JsonProperty("IntroText")]
        public string IntroText { get; set; }

        [JsonProperty("LinkText")]
        public string LinkText { get; set; }

        [JsonProperty("LinkNode")]
        public string LinkNode { get; set; }

        [JsonProperty("Keyword")]
        public string Keyword { get; set; }

        [JsonProperty("WebFormVariantId")]
        public long WebFormVariantId { get; set; }

        [JsonProperty("HitCount")]
        public long HitCount { get; set; }

        [JsonProperty("ShowDirect")]
        public bool ShowDirect { get; set; }

        [JsonProperty("TypeId")]
        public long TypeId { get; set; }

        [JsonProperty("Type")]
        public long Type { get; set; }

        [JsonProperty("Children")]
        public object[] Children { get; set; }

        [JsonProperty("Parent")]
        public object Parent { get; set; }

        [JsonProperty("Categories")]
        public object[] Categories { get; set; }

        [JsonProperty("Products")]
        public object[] Products { get; set; }

        [JsonProperty("UserGroups")]
        public object[] UserGroups { get; set; }

        [JsonProperty("ContactType")]
        public long ContactType { get; set; }

        [JsonProperty("AllowChat")]
        public bool AllowChat { get; set; }

        [JsonProperty("AllowRating")]
        public bool AllowRating { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
